const express = require('express');
const { auth } = require('../middleware/auth');
const prompts = require('../../ai-assistant/prompts');

const router = express.Router();

// Mock OpenAI function for development (replace with actual OpenAI API call)
const generateAIResponse = async (prompt) => {
  // In production, replace this with actual OpenAI API call
  if (process.env.OPENAI_API_KEY) {
    try {
      const { Configuration, OpenAIApi } = require('openai');
      const configuration = new Configuration({
        apiKey: process.env.OPENAI_API_KEY,
      });
      const openai = new OpenAIApi(configuration);

      const response = await openai.createCompletion({
        model: 'text-davinci-003',
        prompt: prompt,
        max_tokens: 500,
        temperature: 0.7,
      });

      return response.data.choices[0].text.trim();
    } catch (error) {
      console.error('OpenAI API error:', error);
      throw new Error('AI service temporarily unavailable');
    }
  } else {
    // Mock response for development
    return `[AI Response] This is a mock response for the prompt: "${prompt.substring(0, 100)}..."\n\nIn production, this would be generated by OpenAI based on your specific requirements. The response would be tailored, creative, and highly relevant to your business needs.`;
  }
};

// @route   POST /api/ai/generate-product-description
// @desc    Generate product description using AI
// @access  Private
router.post('/generate-product-description', auth, async (req, res) => {
  try {
    const { productName, category, features } = req.body;

    if (!productName || !category || !features) {
      return res.status(400).json({
        message: 'Please provide productName, category, and features',
      });
    }

    const prompt = prompts.productDescription(productName, category, features);
    const description = await generateAIResponse(prompt);

    res.json({
      success: true,
      description,
      prompt: process.env.NODE_ENV === 'development' ? prompt : undefined,
    });
  } catch (error) {
    console.error('Product description generation error:', error);
    res
      .status(500)
      .json({ message: 'AI generation failed', error: error.message });
  }
});

// @route   POST /api/ai/generate-store-branding
// @desc    Generate store branding using AI
// @access  Private
router.post('/generate-store-branding', auth, async (req, res) => {
  try {
    const { storeName, niche, targetAudience } = req.body;

    if (!storeName || !niche || !targetAudience) {
      return res.status(400).json({
        message: 'Please provide storeName, niche, and targetAudience',
      });
    }

    const prompt = prompts.storeBranding(storeName, niche, targetAudience);
    const branding = await generateAIResponse(prompt);

    res.json({
      success: true,
      branding,
      prompt: process.env.NODE_ENV === 'development' ? prompt : undefined,
    });
  } catch (error) {
    console.error('Store branding generation error:', error);
    res
      .status(500)
      .json({ message: 'AI generation failed', error: error.message });
  }
});

// @route   POST /api/ai/generate-marketing-copy
// @desc    Generate marketing copy using AI
// @access  Private
router.post('/generate-marketing-copy', auth, async (req, res) => {
  try {
    const { product, platform, goal } = req.body;

    if (!product || !platform || !goal) {
      return res.status(400).json({
        message: 'Please provide product, platform, and goal',
      });
    }

    const prompt = prompts.marketingCopy(product, platform, goal);
    const copy = await generateAIResponse(prompt);

    res.json({
      success: true,
      copy,
      prompt: process.env.NODE_ENV === 'development' ? prompt : undefined,
    });
  } catch (error) {
    console.error('Marketing copy generation error:', error);
    res
      .status(500)
      .json({ message: 'AI generation failed', error: error.message });
  }
});

// @route   POST /api/ai/generate-product-ideas
// @desc    Generate product ideas using AI
// @access  Private
router.post('/generate-product-ideas', auth, async (req, res) => {
  try {
    const { niche, budget, audience } = req.body;

    if (!niche || !budget || !audience) {
      return res.status(400).json({
        message: 'Please provide niche, budget, and audience',
      });
    }

    const prompt = prompts.productIdeas(niche, budget, audience);
    const ideas = await generateAIResponse(prompt);

    res.json({
      success: true,
      ideas,
      prompt: process.env.NODE_ENV === 'development' ? prompt : undefined,
    });
  } catch (error) {
    console.error('Product ideas generation error:', error);
    res
      .status(500)
      .json({ message: 'AI generation failed', error: error.message });
  }
});

// @route   POST /api/ai/generate-social-strategy
// @desc    Generate social media strategy using AI
// @access  Private
router.post('/generate-social-strategy', auth, async (req, res) => {
  try {
    const { brand, platforms, goals } = req.body;

    if (!brand || !platforms || !goals) {
      return res.status(400).json({
        message: 'Please provide brand, platforms, and goals',
      });
    }

    const prompt = prompts.socialStrategy(brand, platforms, goals);
    const strategy = await generateAIResponse(prompt);

    res.json({
      success: true,
      strategy,
      prompt: process.env.NODE_ENV === 'development' ? prompt : undefined,
    });
  } catch (error) {
    console.error('Social strategy generation error:', error);
    res
      .status(500)
      .json({ message: 'AI generation failed', error: error.message });
  }
});

// @route   POST /api/ai/business-advice
// @desc    Get business advice using AI
// @access  Private
router.post('/business-advice', auth, async (req, res) => {
  try {
    const { situation, challenge, goals } = req.body;

    if (!situation || !challenge || !goals) {
      return res.status(400).json({
        message: 'Please provide situation, challenge, and goals',
      });
    }

    const prompt = prompts.businessAdvice(situation, challenge, goals);
    const advice = await generateAIResponse(prompt);

    res.json({
      success: true,
      advice,
      prompt: process.env.NODE_ENV === 'development' ? prompt : undefined,
    });
  } catch (error) {
    console.error('Business advice generation error:', error);
    res
      .status(500)
      .json({ message: 'AI generation failed', error: error.message });
  }
});

// @route   POST /api/ai/generate-email
// @desc    Generate email marketing content
// @access  Private
router.post('/generate-email', auth, async (req, res) => {
  try {
    const { purpose, audience, product } = req.body;

    if (!purpose || !audience || !product) {
      return res.status(400).json({
        message: 'Please provide purpose, audience, and product',
      });
    }

    const prompt = prompts.emailMarketing(purpose, audience, product);
    const email = await generateAIResponse(prompt);

    res.json({
      success: true,
      email,
      prompt: process.env.NODE_ENV === 'development' ? prompt : undefined,
    });
  } catch (error) {
    console.error('Email generation error:', error);
    res
      .status(500)
      .json({ message: 'AI generation failed', error: error.message });
  }
});

// @route   GET /api/ai/available-prompts
// @desc    Get list of available AI prompts
// @access  Private
router.get('/available-prompts', auth, async (req, res) => {
  try {
    const availablePrompts = [
      {
        id: 'product-description',
        name: 'Product Description',
        description: 'Generate compelling product descriptions',
        endpoint: '/api/ai/generate-product-description',
        fields: ['productName', 'category', 'features'],
      },
      {
        id: 'store-branding',
        name: 'Store Branding',
        description: 'Create complete brand identity',
        endpoint: '/api/ai/generate-store-branding',
        fields: ['storeName', 'niche', 'targetAudience'],
      },
      {
        id: 'marketing-copy',
        name: 'Marketing Copy',
        description: 'Generate marketing content for various platforms',
        endpoint: '/api/ai/generate-marketing-copy',
        fields: ['product', 'platform', 'goal'],
      },
      {
        id: 'product-ideas',
        name: 'Product Ideas',
        description: 'Brainstorm new product concepts',
        endpoint: '/api/ai/generate-product-ideas',
        fields: ['niche', 'budget', 'audience'],
      },
      {
        id: 'social-strategy',
        name: 'Social Media Strategy',
        description: 'Create comprehensive social media plans',
        endpoint: '/api/ai/generate-social-strategy',
        fields: ['brand', 'platforms', 'goals'],
      },
      {
        id: 'business-advice',
        name: 'Business Advice',
        description: 'Get personalized business guidance',
        endpoint: '/api/ai/business-advice',
        fields: ['situation', 'challenge', 'goals'],
      },
      {
        id: 'email-marketing',
        name: 'Email Marketing',
        description: 'Generate email marketing content',
        endpoint: '/api/ai/generate-email',
        fields: ['purpose', 'audience', 'product'],
      },
    ];

    res.json({
      success: true,
      prompts: availablePrompts,
      hasOpenAI: !!process.env.OPENAI_API_KEY,
    });
  } catch (error) {
    console.error('Get prompts error:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

module.exports = router;
